// PilotDesignLoader.cs
// --------------------------------------------------------------
// • Load pilot_designs.csv (generated by Python)
// • Slice K rows for this participant and cyclically rotate them
// • Expose the current design vector via public property
// --------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using UnityEngine;

namespace BOforUnity.Scripts
{
    public class PilotDesignLoader : MonoBehaviour
    {
        [Header("References")]
        [SerializeField] private TextAsset csvDesigns;        // drag pilot_designs.csv

        [Header("Participant info")]
        public int designsPerParticipant = 4;    // K
        public int participantIndex      = 0;    // 0-based ID of this user

        [Header("Example usage:\npublic PilotDesignLoader loader;\n\nvoid Start()\n{\n    loader.ApplyDesign(0);   // run 1\n    // collect trust / load …\n\n    loader.ApplyDesign(1);   // run 2\n    // etc.\n}")]
        public int this_var_is_not_usable;
        
        private List<float[]> myDesigns;         // K design vectors
        public IReadOnlyList<float> CurrentDesign { get; private set; }

        /* ------------------------------------------------------ */
        private void Awake()
        {
            if (csvDesigns == null)
            {
                Debug.LogError("pilot_designs.csv missing");
                return;
            }

            // parse CSV
            var all = new List<float[]>();
            using (var reader = new StringReader(csvDesigns.text))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    // skip header
                    if (all.Count == 0 && line.Contains(";")) { /* header row */  if (line.Any(char.IsLetter)) continue; }
                    var vals = line.Split(';')
                                   .Select(s => float.Parse(s, CultureInfo.InvariantCulture))
                                   .ToArray();
                    all.Add(vals);
                }
            }

            // slice rows for this participant
            int start = participantIndex * designsPerParticipant;
            myDesigns = all.Skip(start).Take(designsPerParticipant).ToList();

            // cyclic rotation for counter-balancing
            int offset = participantIndex % designsPerParticipant;
            if (offset != 0)
            {
                var rot = new List<float[]>(myDesigns.Skip(offset));
                rot.AddRange(myDesigns.Take(offset));
                myDesigns = rot;
            }
        }

        /// <summary>Apply design vector of iteration (0 … K-1).</summary>
        public void ApplyDesign(int iteration)
        {
            if (iteration < 0 || iteration >= myDesigns.Count)
            {
                Debug.LogError($"Iteration {iteration} outside 0…{myDesigns.Count - 1}");
                return;
            }

            var vec = myDesigns[iteration];

            CurrentDesign = vec;   // expose for other scripts
        }
    }
}